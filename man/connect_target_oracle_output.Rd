% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/connect_target_oracle.R
\name{connect_target_oracle_output}
\alias{connect_target_oracle_output}
\title{Open connection to oracle-output target data}
\usage{
connect_target_oracle_output(hub_path = ".")
}
\arguments{
\item{hub_path}{Either a character string path to a local Modeling Hub directory
or an object of class \verb{<SubTreeFileSystem>} created using functions \code{\link[=s3_bucket]{s3_bucket()}}
or \code{\link[=gs_bucket]{gs_bucket()}} by providing a string S3 or GCS bucket name or path to a
Modeling Hub directory stored in the cloud.
For more details consult the
\href{https://arrow.apache.org/docs/r/articles/fs.html}{Using cloud storage (S3, GCS)}
in the \code{arrow} package.
The hub must be fully configured with valid \code{admin.json} and \code{tasks.json}
files within the \code{hub-config} directory.}
}
\value{
An arrow dataset object of subclass <target_oracle_output>.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Open the oracle-output target data file(s)
in a hub as an arrow dataset.
}
\details{
If the target data is split across multiple files in a \code{oracle-output} directory,
all files must share the same file format, either csv or parquet.
No other types of files are currently allowed in a \code{oracle-output} directory.
}
\examples{
# Clone example hub
tmp_hub_path <- withr::local_tempdir()
example_hub <- "https://github.com/hubverse-org/example-complex-forecast-hub.git"
gert::git_clone(url = example_hub, path = tmp_hub_path)
# Connect to oracle-output data
oo_con <- connect_target_oracle_output(tmp_hub_path)
oo_con
# Collect all oracle-output data
oo_con |> dplyr::collect()
# Filter for a specific date before collecting
oo_con |>
  dplyr::filter(target_end_date == "2022-11-12") |>
  dplyr::collect()
# Filter for a specific location before collecting
oo_con |>
  dplyr::filter(location == "US") |>
  dplyr::collect()
# Get distinct target_end_date values
oo_con |>
  dplyr::distinct(target_end_date) |>
  dplyr::pull(as_vector = TRUE)
# Access Target oracle-output data from a cloud hub
s3_hub_path <- s3_bucket("example-complex-forecast-hub")
s3_con <- connect_target_oracle_output(s3_hub_path)
s3_con
s3_con |> dplyr::collect()
}
